// Date: 6/3/2018 1:52:49 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.hexopygate.Telgttatium.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelSindrintariaFence extends ModelBase
{
  //fields
    ModelRenderer BottomPart;
    ModelRenderer Stoke1;
    ModelRenderer Stoke2;
    ModelRenderer Stoke3;
    ModelRenderer Crossbar1;
    ModelRenderer Crossbar2;
    ModelRenderer HalfGem;
    ModelRenderer HalfGem2;
    ModelRenderer Gem;
    ModelRenderer Gem2;
    ModelRenderer spike;
    ModelRenderer Decoration3;
    ModelRenderer Decoration2;
    ModelRenderer Decoration;
    ModelRenderer Decoration1;
    
    
    ModelRenderer leftpoint;
    ModelRenderer Crosspointleft;
    ModelRenderer rightpoint;
    ModelRenderer Crosspoint;
    ModelRenderer Crosspointright;
    
    ModelRenderer leftpointD1;
    ModelRenderer CrosspointleftD1;
    ModelRenderer rightpointD1;
    ModelRenderer CrosspointD1;
    ModelRenderer CrosspointrightD1;
    
    ModelRenderer leftpointD2;
    ModelRenderer CrosspointleftD2;
    ModelRenderer rightpointD2;
    ModelRenderer CrosspointD2;
    ModelRenderer CrosspointrightD2;
    
    ModelRenderer leftpointD3;
    ModelRenderer CrosspointleftD3;
    ModelRenderer rightpointD3;
    ModelRenderer CrosspointD3;
    ModelRenderer CrosspointrightD3;
  public ModelSindrintariaFence()
  {
    textureWidth = 64;
    textureHeight = 16;
    setTextureOffset("Decoration3.Folder1", 0, 0);
    setTextureOffset("Decoration2.Folder1", 0, 0);
    setTextureOffset("Decoration.Folder1", 0, 0);
    setTextureOffset("Decoration1.Folder1", 0, 0);
    
      BottomPart = new ModelRenderer(this, 0, 10);
      BottomPart.addBox(0F, 0F, 0F, 16, 5, 1);
      BottomPart.setRotationPoint(-8F, 19F, 0F);
      BottomPart.setTextureSize(64, 16);
      BottomPart.mirror = true;
      setRotation(BottomPart, 0F, 0F, 0F);
      Stoke1 = new ModelRenderer(this, 0, 0);
      Stoke1.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke1.setRotationPoint(-8F, 16F, 0F);
      Stoke1.setTextureSize(64, 16);
      Stoke1.mirror = true;
      setRotation(Stoke1, 0F, 0F, 0F);
      Stoke2 = new ModelRenderer(this, 0, 0);
      Stoke2.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke2.setRotationPoint(3F, 16F, 0F);
      Stoke2.setTextureSize(64, 16);
      Stoke2.mirror = true;
      setRotation(Stoke2, 0F, 0F, 0F);
      Stoke3 = new ModelRenderer(this, 0, 0);
      Stoke3.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke3.setRotationPoint(-3F, 16F, 0F);
      Stoke3.setTextureSize(64, 16);
      Stoke3.mirror = true;
      setRotation(Stoke3, 0F, 0F, 0F);
      Crossbar1 = new ModelRenderer(this, 0, 0);
      Crossbar1.addBox(0F, 0F, 0F, 16, 1, 1);
      Crossbar1.setRotationPoint(-8F, 15F, 0F);
      Crossbar1.setTextureSize(64, 16);
      Crossbar1.mirror = true;
      setRotation(Crossbar1, 0F, 0F, 0F);
      Crossbar2 = new ModelRenderer(this, 0, 0);
      Crossbar2.addBox(0F, 0F, 0F, 16, 1, 1);
      Crossbar2.setRotationPoint(-8F, 12F, 0F);
      Crossbar2.setTextureSize(64, 16);
      Crossbar2.mirror = true;
      setRotation(Crossbar2, 0F, 0F, 0F);
      HalfGem = new ModelRenderer(this, 15, 5);
      HalfGem.addBox(0F, 0F, 0F, 1, 2, 1);
      HalfGem.setRotationPoint(-8F, 13F, 0F);
      HalfGem.setTextureSize(64, 16);
      HalfGem.mirror = true;
      setRotation(HalfGem, 0F, 0F, 0F);
      HalfGem2 = new ModelRenderer(this, 15, 5);
      HalfGem2.addBox(0F, 0F, 0F, 1, 2, 1);
      HalfGem2.setRotationPoint(7F, 13F, 0F);
      HalfGem2.setTextureSize(64, 16);
      HalfGem2.mirror = true;
      setRotation(HalfGem2, 0F, 0F, 0F);
      Gem = new ModelRenderer(this, 7, 5);
      Gem.addBox(0F, 0F, 0F, 2, 2, 1);
      Gem.setRotationPoint(-4F, 13F, 0F);
      Gem.setTextureSize(64, 16);
      Gem.mirror = true;
      setRotation(Gem, 0F, 0F, 0F);
      Gem2 = new ModelRenderer(this, 7, 5);
      Gem2.addBox(0F, 0F, 0F, 2, 2, 1);
      Gem2.setRotationPoint(2F, 13F, 0F);
      Gem2.setTextureSize(64, 16);
      Gem2.mirror = true;
      setRotation(Gem2, 0F, 0F, 0F);
      spike = new ModelRenderer(this, 0, 0);
      spike.addBox(0F, 0F, 0F, 1, 1, 1);
      spike.setRotationPoint(-1F, 11F, 0F);
      spike.setTextureSize(64, 16);
      spike.mirror = true;
      setRotation(spike, 0F, 0F, 0F);
    Decoration3 = new ModelRenderer(this, "Decoration3");
    Decoration3.setRotationPoint(11F, 0F, 0F);
    setRotation(Decoration3, 0F, 0F, 0F);
    Decoration3.mirror = true;
      leftpointD3 = new ModelRenderer(this, 0, 0);
      leftpointD3.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpointD3.setRotationPoint(-5F, 11F, 0F);
      leftpointD3.setTextureSize(64, 16);
      leftpointD3.mirror = true;
      setRotation(leftpointD3, 0F, 0F, 0F);
      CrosspointleftD3 = new ModelRenderer(this, 0, 0);
      CrosspointleftD3.addBox(0F, 0F, 0F, 1, 1, 1);
      CrosspointleftD3.setRotationPoint(-5F, 9F, 0F);
      CrosspointleftD3.setTextureSize(64, 16);
      CrosspointleftD3.mirror = true;
      setRotation(CrosspointleftD3, 0F, 0F, 0F);
    Decoration2 = new ModelRenderer(this, "Decoration2");
    Decoration2.setRotationPoint(-4F, 0F, 0F);
    setRotation(Decoration2, 0F, 0F, 0F);
    Decoration2.mirror = true;
      rightpointD2 = new ModelRenderer(this, 0, 0);
      rightpointD2.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpointD2.setRotationPoint(-3F, 11F, 0F);
      rightpointD2.setTextureSize(64, 16);
      rightpointD2.mirror = true;
      setRotation(rightpointD2, 0F, 0F, 0F);
      CrosspointD2 = new ModelRenderer(this, 0, 0);
      CrosspointD2.addBox(0F, 0F, 0F, 1, 3, 1);
      CrosspointD2.setRotationPoint(-4F, 8F, 0F);
      CrosspointD2.setTextureSize(64, 16);
      CrosspointD2.mirror = true;
      setRotation(CrosspointD2, 0F, 0F, 0F);
      CrosspointrightD2 = new ModelRenderer(this, 0, 0);
      CrosspointrightD2.addBox(0F, 0F, 0F, 1, 1, 1);
      CrosspointrightD2.setRotationPoint(-3F, 9F, 0F);
      CrosspointrightD2.setTextureSize(64, 16);
      CrosspointrightD2.mirror = true;
      setRotation(CrosspointrightD2, 0F, 0F, 0F);
    Decoration = new ModelRenderer(this, "Decoration");
    Decoration.setRotationPoint(0F, 0F, 0F);
    setRotation(Decoration, 0F, 0F, 0F);
    Decoration.mirror = true;
      rightpoint = new ModelRenderer(this, 0, 0);
      rightpoint.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpoint.setRotationPoint(-3F, 11F, 0F);
      rightpoint.setTextureSize(64, 16);
      rightpoint.mirror = true;
      setRotation(rightpoint, 0F, 0F, 0F);
      leftpoint = new ModelRenderer(this, 0, 0);
      leftpoint.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpoint.setRotationPoint(-5F, 11F, 0F);
      leftpoint.setTextureSize(64, 16);
      leftpoint.mirror = true;
      setRotation(leftpoint, 0F, 0F, 0F);
      Crosspoint = new ModelRenderer(this, 0, 0);
      Crosspoint.addBox(0F, 0F, 0F, 1, 3, 1);
      Crosspoint.setRotationPoint(-4F, 8F, 0F);
      Crosspoint.setTextureSize(64, 16);
      Crosspoint.mirror = true;
      setRotation(Crosspoint, 0F, 0F, 0F);
      Crosspointleft = new ModelRenderer(this, 0, 0);
      Crosspointleft.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointleft.setRotationPoint(-5F, 9F, 0F);
      Crosspointleft.setTextureSize(64, 16);
      Crosspointleft.mirror = true;
      setRotation(Crosspointleft, 0F, 0F, 0F);
      Crosspointright = new ModelRenderer(this, 0, 0);
      Crosspointright.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointright.setRotationPoint(-3F, 9F, 0F);
      Crosspointright.setTextureSize(64, 16);
      Crosspointright.mirror = true;
      setRotation(Crosspointright, 0F, 0F, 0F);
    Decoration1 = new ModelRenderer(this, "Decoration1");
    Decoration1.setRotationPoint(6F, 0F, 0F);
    setRotation(Decoration1, 0F, 0F, 0F);
    Decoration1.mirror = true;
      rightpointD1 = new ModelRenderer(this, 0, 0);
      rightpointD1.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpointD1.setRotationPoint(-3F, 11F, 0F);
      rightpointD1.setTextureSize(64, 16);
      rightpointD1.mirror = true;
      setRotation(rightpointD1, 0F, 0F, 0F);
      leftpointD1 = new ModelRenderer(this, 0, 0);
      leftpointD1.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpointD1.setRotationPoint(-5F, 11F, 0F);
      leftpointD1.setTextureSize(64, 16);
      leftpointD1.mirror = true;
      setRotation(leftpointD1, 0F, 0F, 0F);
      CrosspointD1 = new ModelRenderer(this, 0, 0);
      CrosspointD1.addBox(0F, 0F, 0F, 1, 3, 1);
      CrosspointD1.setRotationPoint(-4F, 8F, 0F);
      CrosspointD1.setTextureSize(64, 16);
      CrosspointD1.mirror = true;
      setRotation(CrosspointD1, 0F, 0F, 0F);
      CrosspointleftD1 = new ModelRenderer(this, 0, 0);
      CrosspointleftD1.addBox(0F, 0F, 0F, 1, 1, 1);
      CrosspointleftD1.setRotationPoint(-5F, 9F, 0F);
      CrosspointleftD1.setTextureSize(64, 16);
      CrosspointleftD1.mirror = true;
      setRotation(CrosspointleftD1, 0F, 0F, 0F);
      CrosspointrightD1 = new ModelRenderer(this, 0, 0);
      CrosspointrightD1.addBox(0F, 0F, 0F, 1, 1, 1);
      CrosspointrightD1.setRotationPoint(-3F, 9F, 0F);
      CrosspointrightD1.setTextureSize(64, 16);
      CrosspointrightD1.mirror = true;
      setRotation(CrosspointrightD1, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    BottomPart.render(f5);
    Stoke1.render(f5);
    Stoke2.render(f5);
    Stoke3.render(f5);
    Crossbar1.render(f5);
    Crossbar2.render(f5);
    HalfGem.render(f5);
    HalfGem2.render(f5);
    Gem.render(f5);
    Gem2.render(f5);
    spike.render(f5);
    Decoration3.render(f5);
    Decoration2.render(f5);
    Decoration.render(f5);
    Decoration1.render(f5);
    leftpoint.render(f5);        
    Crosspointleft.render(f5);   
    rightpoint.render(f5);       
    Crosspoint.render(f5);       
    Crosspointright.render(f5);  
                      
    leftpointD1.render(f5);      
    CrosspointleftD1.render(f5); 
    rightpointD1.render(f5);     
    CrosspointD1.render(f5);     
    CrosspointrightD1.render(f5);
                      
    leftpointD2.render(f5);      
    CrosspointleftD2.render(f5); 
    rightpointD2.render(f5);     
    CrosspointD2.render(f5);     
    CrosspointrightD2.render(f5);
                      
    leftpointD3.render(f5);      
    CrosspointleftD3.render(f5); 
    rightpointD3.render(f5);     
    CrosspointD3.render(f5);     
    CrosspointrightD3.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
