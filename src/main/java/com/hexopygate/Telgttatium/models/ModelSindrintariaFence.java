// Date: 6/6/2018 10:36:57 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.hexopygate.Telgttatium.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelSindrintariaFence extends ModelBase
{
  //fields
    ModelRenderer BottomPart;
    ModelRenderer Stoke1;
    ModelRenderer Stoke2;
    ModelRenderer Stoke3;
    ModelRenderer Crossbar1;
    ModelRenderer Crossbar2;
    ModelRenderer HalfGem;
    ModelRenderer HalfGem2;
    ModelRenderer Gem;
    ModelRenderer Gem2;
    ModelRenderer spike;
    ModelRenderer leftpoint3;
    ModelRenderer Crosspointleft3;
    ModelRenderer rightpoint2;
    ModelRenderer Crosspoint2;
    ModelRenderer Crosspointright2;
    ModelRenderer rightpoint;
    ModelRenderer leftpoint;
    ModelRenderer Crosspoint;
    ModelRenderer Crosspointleft;
    ModelRenderer Crosspointright;
    ModelRenderer rightpoint1;
    ModelRenderer leftpoint1;
    ModelRenderer Crosspoint1;
    ModelRenderer Crosspointleft1;
    ModelRenderer Crosspointright1;
  
  public ModelSindrintariaFence()
  {
    textureWidth = 64;
    textureHeight = 16;
    
      BottomPart = new ModelRenderer(this, 0, 10);
      BottomPart.addBox(0F, 0F, 0F, 16, 5, 1);
      BottomPart.setRotationPoint(-8F, 19F, 0F);
      BottomPart.setTextureSize(64, 16);
      BottomPart.mirror = true;
      setRotation(BottomPart, 0F, 0F, 0F);
      Stoke1 = new ModelRenderer(this, 0, 0);
      Stoke1.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke1.setRotationPoint(-8F, 16F, 0F);
      Stoke1.setTextureSize(64, 16);
      Stoke1.mirror = true;
      setRotation(Stoke1, 0F, 0F, 0F);
      Stoke2 = new ModelRenderer(this, 0, 0);
      Stoke2.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke2.setRotationPoint(3F, 16F, 0F);
      Stoke2.setTextureSize(64, 16);
      Stoke2.mirror = true;
      setRotation(Stoke2, 0F, 0F, 0F);
      Stoke3 = new ModelRenderer(this, 0, 0);
      Stoke3.addBox(0F, 0F, 0F, 1, 3, 1);
      Stoke3.setRotationPoint(-3F, 16F, 0F);
      Stoke3.setTextureSize(64, 16);
      Stoke3.mirror = true;
      setRotation(Stoke3, 0F, 0F, 0F);
      Crossbar1 = new ModelRenderer(this, 0, 0);
      Crossbar1.addBox(0F, 0F, 0F, 16, 1, 1);
      Crossbar1.setRotationPoint(-8F, 15F, 0F);
      Crossbar1.setTextureSize(64, 16);
      Crossbar1.mirror = true;
      setRotation(Crossbar1, 0F, 0F, 0F);
      Crossbar2 = new ModelRenderer(this, 0, 0);
      Crossbar2.addBox(0F, 0F, 0F, 16, 1, 1);
      Crossbar2.setRotationPoint(-8F, 12F, 0F);
      Crossbar2.setTextureSize(64, 16);
      Crossbar2.mirror = true;
      setRotation(Crossbar2, 0F, 0F, 0F);
      HalfGem = new ModelRenderer(this, 15, 5);
      HalfGem.addBox(0F, 0F, 0F, 1, 2, 1);
      HalfGem.setRotationPoint(-8F, 13F, 0F);
      HalfGem.setTextureSize(64, 16);
      HalfGem.mirror = true;
      setRotation(HalfGem, 0F, 0F, 0F);
      HalfGem2 = new ModelRenderer(this, 15, 5);
      HalfGem2.addBox(0F, 0F, 0F, 1, 2, 1);
      HalfGem2.setRotationPoint(7F, 13F, 0F);
      HalfGem2.setTextureSize(64, 16);
      HalfGem2.mirror = true;
      setRotation(HalfGem2, 0F, 0F, 0F);
      Gem = new ModelRenderer(this, 7, 5);
      Gem.addBox(0F, 0F, 0F, 2, 2, 1);
      Gem.setRotationPoint(-4F, 13F, 0F);
      Gem.setTextureSize(64, 16);
      Gem.mirror = true;
      setRotation(Gem, 0F, 0F, 0F);
      Gem2 = new ModelRenderer(this, 7, 5);
      Gem2.addBox(0F, 0F, 0F, 2, 2, 1);
      Gem2.setRotationPoint(2F, 13F, 0F);
      Gem2.setTextureSize(64, 16);
      Gem2.mirror = true;
      setRotation(Gem2, 0F, 0F, 0F);
      spike = new ModelRenderer(this, 0, 0);
      spike.addBox(0F, 0F, 0F, 1, 1, 1);
      spike.setRotationPoint(-1F, 11F, 0F);
      spike.setTextureSize(64, 16);
      spike.mirror = true;
      setRotation(spike, 0F, 0F, 0F);
      leftpoint3 = new ModelRenderer(this, 0, 0);
      leftpoint3.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpoint3.setRotationPoint(1F, 11F, 0F);
      leftpoint3.setTextureSize(64, 16);
      leftpoint3.mirror = true;
      setRotation(leftpoint3, 0F, 0F, 0F);
      Crosspointleft3 = new ModelRenderer(this, 0, 0);
      Crosspointleft3.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointleft3.setRotationPoint(1F, 9F, 0F);
      Crosspointleft3.setTextureSize(64, 16);
      Crosspointleft3.mirror = true;
      setRotation(Crosspointleft3, 0F, 0F, 0F);
      rightpoint2 = new ModelRenderer(this, 0, 0);
      rightpoint2.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpoint2.setRotationPoint(7F, 11F, 0F);
      rightpoint2.setTextureSize(64, 16);
      rightpoint2.mirror = true;
      setRotation(rightpoint2, 0F, 0F, 0F);
      Crosspoint2 = new ModelRenderer(this, 0, 0);
      Crosspoint2.addBox(0F, 0F, 0F, 1, 3, 1);
      Crosspoint2.setRotationPoint(2F, 8F, 0F);
      Crosspoint2.setTextureSize(64, 16);
      Crosspoint2.mirror = true;
      setRotation(Crosspoint2, 0F, 0F, 0F);
      Crosspointright2 = new ModelRenderer(this, 0, 0);
      Crosspointright2.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointright2.setRotationPoint(3F, 9F, 0F);
      Crosspointright2.setTextureSize(64, 16);
      Crosspointright2.mirror = true;
      setRotation(Crosspointright2, 0F, 0F, 0F);
      rightpoint = new ModelRenderer(this, 0, 0);
      rightpoint.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpoint.setRotationPoint(3F, 11F, 0F);
      rightpoint.setTextureSize(64, 16);
      rightpoint.mirror = true;
      setRotation(rightpoint, 0F, 0F, 0F);
      leftpoint = new ModelRenderer(this, 0, 0);
      leftpoint.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpoint.setRotationPoint(-7F, 11F, 0F);
      leftpoint.setTextureSize(64, 16);
      leftpoint.mirror = true;
      setRotation(leftpoint, 0F, 0F, 0F);
      Crosspoint = new ModelRenderer(this, 0, 0);
      Crosspoint.addBox(0F, 0F, 0F, 1, 3, 1);
      Crosspoint.setRotationPoint(-8F, 8F, 0F);
      Crosspoint.setTextureSize(64, 16);
      Crosspoint.mirror = true;
      setRotation(Crosspoint, 0F, 0F, 0F);
      Crosspointleft = new ModelRenderer(this, 0, 0);
      Crosspointleft.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointleft.setRotationPoint(-9F, 9F, 0F);
      Crosspointleft.setTextureSize(64, 16);
      Crosspointleft.mirror = true;
      setRotation(Crosspointleft, 0F, 0F, 0F);
      Crosspointright = new ModelRenderer(this, 0, 0);
      Crosspointright.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointright.setRotationPoint(-7F, 9F, 0F);
      Crosspointright.setTextureSize(64, 16);
      Crosspointright.mirror = true;
      setRotation(Crosspointright, 0F, 0F, 0F);
      rightpoint1 = new ModelRenderer(this, 0, 0);
      rightpoint1.addBox(0F, 0F, 0F, 1, 1, 1);
      rightpoint1.setRotationPoint(-3F, 11F, 0F);
      rightpoint1.setTextureSize(64, 16);
      rightpoint1.mirror = true;
      setRotation(rightpoint1, 0F, 0F, 0F);
      leftpoint1 = new ModelRenderer(this, 0, 0);
      leftpoint1.addBox(0F, 0F, 0F, 1, 1, 1);
      leftpoint1.setRotationPoint(-5F, 11F, 0F);
      leftpoint1.setTextureSize(64, 16);
      leftpoint1.mirror = true;
      setRotation(leftpoint1, 0F, 0F, 0F);
      Crosspoint1 = new ModelRenderer(this, 0, 0);
      Crosspoint1.addBox(0F, 0F, 0F, 1, 3, 1);
      Crosspoint1.setRotationPoint(-4F, 8F, 0F);
      Crosspoint1.setTextureSize(64, 16);
      Crosspoint1.mirror = true;
      setRotation(Crosspoint1, 0F, 0F, 0F);
      Crosspointleft1 = new ModelRenderer(this, 0, 0);
      Crosspointleft1.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointleft1.setRotationPoint(-5F, 9F, 0F);
      Crosspointleft1.setTextureSize(64, 16);
      Crosspointleft1.mirror = true;
      setRotation(Crosspointleft1, 0F, 0F, 0F);
      Crosspointright1 = new ModelRenderer(this, 0, 0);
      Crosspointright1.addBox(0F, 0F, 0F, 1, 1, 1);
      Crosspointright1.setRotationPoint(-3F, 9F, 0F);
      Crosspointright1.setTextureSize(64, 16);
      Crosspointright1.mirror = true;
      setRotation(Crosspointright1, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    BottomPart.render(f5);
    Stoke1.render(f5);
    Stoke2.render(f5);
    Stoke3.render(f5);
    Crossbar1.render(f5);
    Crossbar2.render(f5);
    HalfGem.render(f5);
    HalfGem2.render(f5);
    Gem.render(f5);
    Gem2.render(f5);
    spike.render(f5);
    leftpoint3.render(f5);
    Crosspointleft3.render(f5);
    rightpoint2.render(f5);
    Crosspoint2.render(f5);
    Crosspointright2.render(f5);
    rightpoint.render(f5);
    leftpoint.render(f5);
    Crosspoint.render(f5);
    Crosspointleft.render(f5);
    Crosspointright.render(f5);
    rightpoint1.render(f5);
    leftpoint1.render(f5);
    Crosspoint1.render(f5);
    Crosspointleft1.render(f5);
    Crosspointright1.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
